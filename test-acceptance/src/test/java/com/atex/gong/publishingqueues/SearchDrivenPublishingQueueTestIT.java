package com.atex.gong.publishingqueues;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.atex.gong.AbstractWebTestBase;
import com.atex.gong.utils.ContentTestUtil;
import com.atex.plugins.baseline.collection.searchbased.SearchDrivenPublishingQueuePolicy;
import com.atex.plugins.baseline.collection.searchbased.decorators.DecoratorMetadataBased;
import com.atex.standard.article.ArticlePolicy;
import com.google.inject.Inject;
import com.polopoly.cm.ContentReference;
import com.polopoly.cm.DefaultMajorNames;
import com.polopoly.cm.ExternalContentId;
import com.polopoly.cm.app.policy.SelectPolicy;
import com.polopoly.cm.client.CMException;
import com.polopoly.cm.collections.ContentList;
import com.polopoly.cm.policy.Policy;
import com.polopoly.cm.policy.PolicyCMServer;
import com.polopoly.metadata.Dimension;
import com.polopoly.metadata.Entity;
import com.polopoly.metadata.Metadata;
import com.polopoly.metadata.MetadataAware;
import com.polopoly.metadata.util.MetadataUtil;
import com.polopoly.testnext.base.ImportTestContent;
import com.polopoly.testnj.TestNJRunner;


@RunWith(TestNJRunner.class)
@ImportTestContent(
        dir = "/com/atex/gong/publishingqueues/",
        files = {"SearchDrivenPublishingQueueTestIT.content" },
        waitUntilContentsAreIndexed = { "SearchDrivenPublishingQueueTestIT.article1",
                                        "SearchDrivenPublishingQueueTestIT.article2" })
public class SearchDrivenPublishingQueueTestIT extends AbstractWebTestBase {

    // Generated by new IdGenerator("SearchDrivenPublishingQueuePolicy", "enigma").createId();
    // Used by test content.
    private static final String GENERATED_TAG = "3299f4adca3b26e55409b3a37f3ca6ff";
    private static final String METADATA_DECORATOR =
            "com.atex.plugins.baseline.SearchDrivenPublishingQueue.decorator.metadata";
    @Inject
    private PolicyCMServer cmServer;

    @Inject
    private ContentTestUtil contentUtil;

    private String siteId;
    private ArticlePolicy article1;
    private ArticlePolicy article2;

    @Before
    public void init() throws CMException {
        siteId = contentUtil.getTestContentId(".site");
        article1 = (ArticlePolicy) contentUtil.getTestPolicy(".article1");
        article2 = (ArticlePolicy) contentUtil.getTestPolicy(".article2");
    }

    @Test
    public void testSortOrderAscending() throws Exception {
        Policy pq = createPQ(GENERATED_TAG, "asc");

        String pqId = pq.getContentId().getContentId().getContentIdString();
        webTest.loadPage(String.format("/cmlink/%s/%s", siteId, pqId));
        assertInPosition(article1.getName(), 1);
        assertInPosition(article2.getName(), 2);
    }

    @Test
    public void testSortOrderDescending() throws Exception {
        Policy pq = createPQ(GENERATED_TAG, "desc");

        String pqId = pq.getContentId().getContentId().getContentIdString();
        webTest.loadPage(String.format("/cmlink/%s/%s", siteId, pqId));
        assertInPosition(article1.getName(), 2);
        assertInPosition(article2.getName(), 1);
    }

    private void assertInPosition(final String name, final int pos) throws CMException {
        String xpath = String.format("//div[contains(@class, 'element-list')]/ul/li[%d]", pos);
        String errorMessage = String.format("Did not find article '%s' in position '%d'", name, pos);
        webTest.assertContainsByXPath(errorMessage, xpath, name);
    }

    private Metadata createMetadata(final String tag) {
        Metadata metadata = new Metadata();
        Dimension dimension = new Dimension("dimension.T3ag", "Tag", false);
        dimension.addEntity(new Entity(tag));
        metadata.addDimension(dimension);

        return metadata;
    }

    private Policy createPQ(final String tag, final String sortOrder) throws CMException {
        int major = cmServer.getMajorByName(DefaultMajorNames.CONTENT);
        ExternalContentId it = new ExternalContentId(METADATA_DECORATOR);
        DecoratorMetadataBased decoratorMetadata = (DecoratorMetadataBased) cmServer.createContent(major, it);
        MetadataAware metadataAware = MetadataUtil.getMetadataAware(decoratorMetadata);
        metadataAware.setMetadata(createMetadata(tag));
        cmServer.commitContent(decoratorMetadata);

        major = cmServer.getMajorByName(DefaultMajorNames.CONTENT);
        it = new ExternalContentId("com.atex.plugins.baseline.SearchDrivenPublishingQueue.decorator.sort");
        DecoratorSort decoratorSort = (DecoratorSort) cmServer.createContent(major, it);
        SelectPolicy fieldSelect = (SelectPolicy) decoratorSort.getChildPolicy("field");
        fieldSelect.setValue("publishingDate");
        SelectPolicy orderSelect = (SelectPolicy) decoratorSort.getChildPolicy("order");
        orderSelect.setValue(sortOrder);
        cmServer.commitContent(decoratorSort);

        major = cmServer.getMajorByName(DefaultMajorNames.ARTICLE);
        it = new ExternalContentId("com.atex.plugins.baseline.SearchDrivenPublishingQueue");
        SearchDrivenPublishingQueuePolicy pq = (SearchDrivenPublishingQueuePolicy) cmServer.createContent(major, it);
        pq.setSecurityParentId(new ExternalContentId(siteId));

        ContentList decorators = pq.getContent().getContentList("sources");
        decorators.add(0, new ContentReference(decoratorMetadata.getContentId().getContentId()));
        decorators.add(0, new ContentReference(decoratorSort.getContentId().getContentId()));
        cmServer.commitContent(pq);

        major = cmServer.getMajorByName(DefaultMajorNames.LAYOUTELEMENT);
        it = new ExternalContentId("com.atex.plugins.list.MainElement");
        Policy listElement = cmServer.createContent(major, new ExternalContentId(siteId), it);
        ContentReference pqRef = new ContentReference(pq.getContentId().getContentId());
        listElement.getContent().getContentList("publishingQueue").add(0, pqRef);
        cmServer.commitContent(listElement);

        decoratorMetadata = (DecoratorMetadataBased) cmServer.createContentVersion(decoratorMetadata.getContentId());
        decoratorMetadata.setSecurityParentId(pq.getContentId().getContentId());
        cmServer.commitContent(decoratorMetadata);

        decoratorSort = (DecoratorSort) cmServer.createContentVersion(decoratorSort.getContentId());
        decoratorSort.setSecurityParentId(pq.getContentId().getContentId());
        cmServer.commitContent(decoratorSort);

        return listElement;
    }
}
